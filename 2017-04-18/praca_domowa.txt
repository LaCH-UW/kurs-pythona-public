
Rozwiązania zadań powinny znaleźć się w repozytorium do 2017-05-08, 23:59.

1. Popraw błędy występujące w przyklad_1b.py i przyklad_1c.py

2. Stwórz moduł txt_to_pattern, który zawiera funkcję make_pattern(txt) przetwarzającą podany string "Lalki" tak, aby: litery i liczby zostały zamienione na '|', a pozostałe znaki na '0', a między każdymi dwoma znakami dodana została tzw. podłoga, czyli '_'.
   Podpowiedź: zauważ użycie if-else i funkcji join() w przyklad_1d.py
Wypisz rezultat działania funkcji make_patterna na pierwszych 10000 znaków z pliku lalka-tom-pierwszy.txt do pliku lalka_wzor.txt

3. Stwórz moduł txt_tools (czyli plik txt_tools.py) zawierający funkcje:

a. lexical_richness(fname) : wczyta tekst z pliku fname i wyliczy jego współczynnik bogactwa leksykalnego (porównaj poprzednia praca domowa), ale tym razem dla sensownej definicji słów (powiedzmy: wersja_4 z przyklad_1d.py)
Użyj funkcji lexical_richness do wyliczenia w/w współczynnika dla pliku lalka-tom-pierwszy.txt i zapisania go do pliku bogactwo-lalki.txt

b. get_emoji(fname) : wczyta tekst z pliku fname i zwróci listę wszystkich emotikonek zawartych w tym pliku (na potrzeby ćwiczenia załóżmy, że wszytkie emotki są z tej samej kategorii unicode'owej co ta: ☺)
Użyj funkcji get_emoji do znalezienia wszystkich emotikonek w pliku lorem-ipsum.txt i wypisania ich do pliku emotki.txt, po jednej w linii

c. maim(fname_in, fname_out) : wczyta tekst z pliku fname_in i wypisze do pliku fname_out jego zawartość pozbawioną diakrytów (zamieni 'żółty' na 'zolty').
   Podpowiedź 1: przeczytaj https://docs.python.org/3/library/unicodedata.html
   Podpowiedź 2: funkcja unicodedata.normalize('NFD', text) rozbija znaki na części składowe (np. 'ą' na 'a' i 'ogonek'), funkcja unicodedata.normalize('NFC', text) wykonuje operację odwrotną
   Podpowiedź 3: większość (?) diakrytów należy do kategorii 'Mn'
Użyj funkcji maim do przetworzenia pliku lalka-tom-pierwszy.txt na plik lalka-kulawa.txt

W razie pytań: p.kasprzyk@lach.edu.pl

